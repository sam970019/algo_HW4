import time
import matplotlib.pyplot as plt

# Recursive implementation of Fibonacci sequence
def fibonacci_recursive(n):
    if n <= 1:
        return n
    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)

# Dynamic programming implementation of Fibonacci sequence
def fibonacci_dynamic(n):
    memo = [0] * (n+1)
    memo[0], memo[1] = 0, 1
    for i in range(2, n+1):
        memo[i] = memo[i-1] + memo[i-2]
    return memo[n]

# Measure execution time for F(10), F(20), ..., F(100) using both methods
recursive_times = []
dynamic_times = []
n_values = list(range(10, 101, 10))
f40 = 0
for n in n_values:
    if n < 50:
        # Recursive method
        start = time.time()
        fibonacci_recursive(n)
        end = time.time()
        recursive_times.append(end - start)
        if n == 40:
            f40 = recursive_times[-1]
    else:
        recursive_times.append(f40*1000)
        
    # Dynamic programming method
    start = time.time()
    fibonacci_dynamic(n)
    end = time.time()
    dynamic_times.append(end - start)

# Plot results
plt.plot(n_values, recursive_times, label='Recursive')
plt.plot(n_values, dynamic_times, label='Dynamic Programming')
plt.xlabel('n')
plt.ylabel('Execution Time (seconds)')
plt.title('Execution Time for Fibonacci Sequence')
plt.legend()
plt.show()
